{"ast":null,"code":"import _classCallCheck from \"C:/Users/Peter/Desktop/Github/restful-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Peter/Desktop/Github/restful-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Peter/Desktop/Github/restful-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Peter/Desktop/Github/restful-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Peter\\\\Desktop\\\\Github\\\\restful-api\\\\src\\\\components\\\\graph\\\\graph.js\";\nimport React, { Component } from 'react';\nimport { Chart } from \"chart.js\";\nimport percentDiff from 'percentage-difference'; // import \"./graph.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Graph = /*#__PURE__*/function (_Component) {\n  _inherits(Graph, _Component);\n\n  var _super = _createSuper(Graph);\n\n  function Graph() {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      regionalTrends: null,\n      stateTrends: null,\n      nationTrends: null,\n      yearsArr: []\n    };\n    _this.myGraph = new Chart('graph', {\n      type: 'line',\n      data: {\n        labels: _this.state.yearsArr,\n        datasets: [{\n          fill: false,\n          borderColor: \"rgb(112, 25, 25)\",\n          borderWidth: 2,\n          data: _this.state.regionalTrends\n        }, {\n          fill: false,\n          borderColor: \"rgb(0,0,255)\",\n          borderWidth: 2,\n          data: _this.state.stateTrends,\n          pointStyle: 'rect'\n        }, {\n          fill: false,\n          borderColor: \"rgb(0,191,255)\",\n          borderWidth: 2,\n          data: _this.state.nationTrends,\n          borderDash: [10, 5],\n          pointStyle: 'triangle'\n        }]\n      },\n      options: {\n        elements: {\n          line: {\n            tension: 0\n          }\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          yAxes: [{\n            gridLines: {\n              color: \"rgba(0, 0, 0, 0)\"\n            },\n            ticks: {\n              min: -10 // max: 70\n\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"Percentage Change\"\n            }\n          }]\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"componentDidMount\",\n    value: //Loads props after componented mounted\n    function componentDidMount() {\n      //Calcuate percentage change for the following year\n      var constcalculatesChange = function constcalculatesChange(array) {\n        var diffsArr = [];\n\n        for (var i = 0; i < array.length; i++) {\n          diffsArr.push(percentDiff(array[0], array[i]));\n        }\n\n        ; // Return values in percent\n\n        return diffsArr;\n      }; //Generating year range for x-axis from start to end\n\n\n      var labels = function labels(start, end) {\n        var yearsArr = [];\n\n        for (var i = start; i <= end; i++) {\n          yearsArr.push(i);\n        }\n\n        ;\n        return yearsArr;\n      }; //Shortening name\n\n\n      var data = this.props.dataObj; // console.log(data);\n\n      this.setState({\n        //Trends\n        regionalTrends: constcalculatesChange(data.trend_comparison.regional),\n        stateTrends: constcalculatesChange(data.trend_comparison.state),\n        nationTrends: constcalculatesChange(data.trend_comparison.nation),\n        yearsArr: labels(data.summary.jobs_growth.start_year, data.summary.jobs_growth.end_year)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Regional Trends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          style: {\n            borderWidth: \"3px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\n;\nexport default Graph;","map":{"version":3,"sources":["C:/Users/Peter/Desktop/Github/restful-api/src/components/graph/graph.js"],"names":["React","Component","Chart","percentDiff","Graph","state","regionalTrends","stateTrends","nationTrends","yearsArr","myGraph","type","data","labels","datasets","fill","borderColor","borderWidth","pointStyle","borderDash","options","elements","line","tension","legend","display","scales","yAxes","gridLines","color","ticks","min","scaleLabel","labelString","constcalculatesChange","array","diffsArr","i","length","push","start","end","props","dataObj","setState","trend_comparison","regional","nation","summary","jobs_growth","start_year","end_year"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Chart } from \"chart.js\";\r\nimport percentDiff from 'percentage-difference';\r\n// import \"./graph.css\";\r\n\r\nclass Graph extends Component {\r\n\r\n  //Declaring states\r\n  state={\r\n    regionalTrends: null,\r\n    stateTrends: null,\r\n    nationTrends: null,\r\n    yearsArr: []\r\n  };\r\n\r\n  //Loads props after componented mounted\r\n  componentDidMount(){\r\n\r\n    //Calcuate percentage change for the following year\r\n    const constcalculatesChange = array => {\r\n      let diffsArr = [];\r\n        for(let i=0; i < array.length; i++){\r\n          diffsArr.push(percentDiff(array[0], array[i]))\r\n        };\r\n\r\n      // Return values in percent\r\n      return(diffsArr);\r\n    };\r\n\r\n    //Generating year range for x-axis from start to end\r\n    const labels = (start, end) => {\r\n      let yearsArr = [];\r\n      for(let i = start; i <= end; i++){\r\n        yearsArr.push(i);\r\n      };\r\n      return(yearsArr);\r\n    };\r\n\r\n    //Shortening name\r\n    let data = this.props.dataObj;\r\n    // console.log(data);\r\n\r\n    this.setState({\r\n\r\n      //Trends\r\n      regionalTrends: constcalculatesChange(data.trend_comparison.regional),\r\n      stateTrends: constcalculatesChange(data.trend_comparison.state),\r\n      nationTrends: constcalculatesChange(data.trend_comparison.nation),\r\n      yearsArr: labels(data.summary.jobs_growth.start_year,data.summary.jobs_growth.end_year)\r\n\r\n    });\r\n  };\r\n\r\n  myGraph=  new Chart('graph', {\r\n    type: 'line',\r\n    data: {\r\n      labels: this.state.yearsArr,\r\n      datasets: [\r\n        {\r\n          fill: false,\r\n          borderColor: \"rgb(112, 25, 25)\",\r\n          borderWidth: 2,\r\n          data: this.state.regionalTrends\r\n        },\r\n        {\r\n          fill: false,\r\n          borderColor: \"rgb(0,0,255)\",\r\n          borderWidth: 2,\r\n          data: this.state.stateTrends,\r\n          pointStyle: 'rect'\r\n        },\r\n        {\r\n          fill: false,\r\n          borderColor: \"rgb(0,191,255)\",\r\n          borderWidth: 2,\r\n          data: this.state.nationTrends,\r\n          borderDash: [10, 5],\r\n          pointStyle: 'triangle'\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      elements: {\r\n        line: {\r\n          tension: 0\r\n        }\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            gridLines: {\r\n              color: \"rgba(0, 0, 0, 0)\",\r\n            },\r\n            ticks: {\r\n              min: -10\r\n              // max: 70\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Percentage Change\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  });\r\n\r\n  render() {\r\n\r\n\r\n\r\n    return(\r\n      <div>\r\n        <p className=\"title\">Regional Trends</p>\r\n        <hr style={{borderWidth:\"3px\"}}/>\r\n        <canvas id=\"graph\"></canvas>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Graph;\r\n"]},"metadata":{},"sourceType":"module"}